=== function alter(ref x, k) ===
~ x = x + k

=== function roll_dice(bonus) ===
    ~return RANDOM(1,6)+RANDOM(1,6)+bonus
    
    
=== function seen_ever (-> x)
    ~ return TURNS_SINCE(x) >= 0
    
// === function readSyllabus()
//  ~ return read_Syllabus || skip


=== function came_from(-> x)
    ~ return TURNS_SINCE(x) == 0 
/*
Example

  * {came_from(-> nice_welcome)} 'I'm happy to be here!'
  * {came_from(-> nasty_welcome)} 'Let's keep this quick.'
*/
    
 
 === function isAre(list)
 {LIST_COUNT(list) == 1:is|are}
 
 
 === function seen_last_turn (-> x)
   ~ return TURNS_SINCE(x) <= 1 && seen_ever(x)
   
  === function seen_very_recently(-> x)
   ~ return TURNS_SINCE(x) <= 3 && seen_ever(x)
   
  === function seen_but_not_recently(-> x)
   ~ return seen_ever(x) && TURNS_SINCE(x) >= 8
   
  === function seen_more_recently_than(-> link, -> marker)
 { TURNS_SINCE(link) >= 0: 
   { TURNS_SINCE(marker) == -1: 
       ~ return true  // you’ve never seen “marker”
    } 
// did you see link fewer turns ago than marker?
    ~ return TURNS_SINCE(link) < TURNS_SINCE(marker) 
 }
 ~ return false // you’ve never seen "link"
 
 /*
 Example
 
 - (start_of_scene)
"Welcome!"

- (opts)
 *   (cough) [Cough politely]
     I clear my throat. 
     -> opts

 *   { seen_more_recently_than(-> cough, -> start_of_scene) }
     "Hello!"

 +   { not seen_more_recently_than(-> cough, -> start_of_scene) }
     ["Hello!"]
     I try to speak, but I can't get the words out!
     -> opts
 */
 
 
=== function changeStateTo(ref stateVariable, stateToReach)
  // remove all states of this type
   ~ stateVariable -= LIST_ALL(stateToReach)
  
  // put back the state we want
   ~ stateVariable += stateToReach
   
   /*
   Example
   
   ~ changeState(kettleState, on)

~ changeState(kettleState, warm)
   */

=== function print_num(x) ===
 {
  - x >= 1000:
   {print_num(x / 1000)} thousand { x mod 1000 > 0:{print_num(x mod 1000)}}
  - x >= 100:
   {print_num(x / 100)} hundred { x mod 100 > 0:and {print_num(x mod 100)}}
  - x == 0:
   zero
  - else:
   { x >= 20:
    { x / 10:
     - 2: twenty
     - 3: thirty
     - 4: forty
     - 5: fifty
     - 6: sixty
     - 7: seventy
     - 8: eighty
     - 9: ninety
   }
   { x mod 10 > 0:
    <>-<>
    }
   }
   { x < 10 || x > 20:
    { x mod 10:
     - 1: one
     - 2: two
     - 3: three
     - 4: four
     - 5: five
     - 6: six
     - 7: seven
     - 8: eight
     - 9: nine
    }
   - else:
    { x:
     - 10: ten
     - 11: eleven
     - 12: twelve
     - 13: thirteen
     - 14: fourteen
     - 15: fifteen
     - 16: sixteen
     - 17: seventeen
     - 18: eighteen
     - 19: nineteen
    }
   }
 }



    
